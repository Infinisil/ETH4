#+TITLE: Software Architecture and Engineering
#+AUTHOR: Silvan Mosberger

* Modularity

** Coupling

*** Data Coupling

Representation Exposure: Try not to expose internal representation, because this couples thes code with the client and is difficult to change during maintenance.

**** Approach 1: Restricting Access to Data

Force narrow interface, hide implementation, no references to subobjects (leaking), no storing of arguments as subobjects (capturing).

Facade pattern: A single, simplified interface without hiding detais completely.

**** Approach 2: Making SHared Data Immutable

Most problems don't occur like this, but copies can lead to run-time/memory overhead and sometimes mutation is still needed.

Flyweight pattern: Basically memoization, a factory for objects checks if one exists for a key and returns it or creates a new one otherwise. Java uses this for strings, multiple "Hello" strings are shared between all clients that requested it.

**** Approach 3: Avoid Sharing Data

Abstract the relevant parts to not depend on each other and avoid sharing data.

**** Architectual Style

***** Pipe-and-Filter

Basically reactive programming, just work with filters, splits, maps, pipes, etc. Very functional, much wow. Also Unix pipes.

Fusion: Fusion reduces communication cost at the expense of parallelism

Fission: Fission is profitable if the benefits of parallelization outweigh the overhead introduced by fission

Advantages: Reusability, ease of maintenance, potential for paralellism

Disadvantages: Sharing is expensive/limiting, difficult to design incremental filters, "not appropriate for user interaction" (lol no), "error handling is hard" (only when you don't do it right), "smallest denominator on data transmission" (ever heard of types?).

*** Procedural Coupling

Modules are coupled by called methods of each other. Changing either one of them implies changing another one.

**** Approach 1: Moving Code

Fix the dependency by moving code to the module that it should be in.

**** Approach 2: Event-Based Style

Components generate events, others can listen to specific events. Generators don't know who's affected. E.g. IDE's, user interfaces, web sites. Observers and Observables.

Advantages: Good reuse, add/remove/replace components with minimum effect on other components

Disadvantages: Loss of control (what happens on this event, etc.), ensuring correctness is difficult because it depends on context

***** Model-View-Controller :/

**** Approach 3: Restricting Calls

Enforce restricted access to calls of different modules. Example: Layered architecture (can only call methods of next layer).

***** Three-Tier Architecture 

Presentation Tier (UI), Logic Tier (functionality), Data Tier (persistent storage). Can exchange any tier.

Advantages: Increasing levels of abstraction on higher layers, simple maintenance (low coupling), reusability of layer implementation

Disadvantages: Performance since there are many levels of indirection.

*** Class Coupling

Inheritance couples classes together and changes to the superclass can cause problems in the subclass.

**** Approach 1: Replacing Inheritance with Aggregation

Replacing with subtyping, aggregation, interfaces, delegation. Using class nams in declarations couples client to them.

**** Approach 2: Using Interfaces

Typeclasses in functional programming, this is the way to do it (imo). There is still going to be 1 place where the implementing class is mentioned, in the constructor.

**** Approach 3: Delegating Allocations

Dependency Injection: Dependencies are defined in a separate configuration file, using reflection on runtime to define the behaviour.

Factories: Use abstract factory, concrete factory can be decided by client.

*** Summary

Low coupling is goal, but there are always trade-offs. Coupling to stable classes is less critical.

